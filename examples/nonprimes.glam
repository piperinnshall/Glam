isPrime fn:bool = (int) -> when {
    ? $ < 2 -> false
    _ -> (d int) -> when d {
        ? d * d > $ -> true
        ? $ % d == 0 -> false
        _ -> self(d + 1)
    }(2)
}

safeDiv fn:fn:!int = (x int) -> (int) -> when $ {
  0 -> err, "div by zero"
  _ -> ok, x / $
}

sum fn:int = ([int]) -> when {
    [] -> 0
    [x] -> x
    [x, y] -> x + y
    _ -> head($) + self(tail($))
}

filterPrimes fn:[int] = ([int]) -> filter(isPrime)($)

describe fn:str = (!int) -> when {
    ok, 0 -> "No primes found!"
    ok, x -> "Sum divided by count: {x}"
    err, msg -> "Error: {msg}"
}

process fn:str = ([int]) -> {
    primes [int] = filterPrimes($)
    result !int = safeDiv(sum(primes))(length(primes))
    describe(result)
}

input [int] = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

main = out {
    \\Input: {input}
    \\Filtered Primes: {filterPrimes(input)}
    \\Result: {process(input)}
}

